■バージョン管理（Github上)しないファイルを外す方法
→.gitignoreファイルで管理する
例.gitignoreファイルの書き方）

#指定したファイルを除外
index.html
#ルートディレクトリを削除
/root.html
#ディレクトリ以下を削除
dir/
#/以外の文字列にマッチ「*」
/*/*.css

-----------------------------------------------------

■ローカルの変更を取り消す
git checkout -- <ファイル名>
git checkout -- <ディレクトリ名>

git checkout -- .
※全てのファイルを元に戻す

----------------------------------------------------

■ステージした変更を取り消す
git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>

git reset HEAD .
※全変更を取り消す

-----------------------------------------------------


■直前のコミットをやり直す_誤ってコミットしてしまった場合
git commit --amend
※リモートリポジトリにPushしたコミットはやり直したらアウト!!!
絶対だめ

---------------------------------------------------

■リモート（github）から情報を取得する（フェッチ）
→リモートブランチに保存される（ローカルに反映する必要がある場合には、マージする必要がある）

git fetch <リモート名>
ex) git fetch origin

・必ずコマンドを打つ前に、ローカルのものは全てリモートに上げておくこと＝コンフリクトが起きないようにすること


-------------------------------------------------------

■リモート（github）から情報を取得してマージする（プル）
git pull <リモート名><ブランチ名>
ex) git pull origin master
※他のブランチの情報と混同してしまう可能性があるため、フェッチを使用する方が良き

※上記コマンドは下記コマンドと同等
git fetch origin master
git merge origin/master


------------------------------------------------------

■コマンド_どのコミットがどこのブランチを指しているか確認したい
git log --oneline --decorate

------------------------------------------------------

■ブランチを切り替える
git checkout <既存ブランチ>

git checkout -b <既存ブランチ>
※ブランチの作成と切り替えを一緒にやってくれる

------------------------------------------------------


■マージ（他の人の変更内容を取り込むこと）
git merge <ブランチ名>
git merge <リモート名\ブランチ名)
ex) git merge origin\master

・マージの種類
➀Fast Foward:早送りになるマージ
→ブランチのポインタを前に進めるだけ

②Auto Merge: 基本的なマージ
→枝分かれして開発していた場合、マージコミットという新しいコミットを作る

③


------------------------------------------------------


